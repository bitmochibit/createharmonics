<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AUDIO_SYSTEM.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AUDIO_SYSTEM.md" />
              <option name="updatedContent" value="# Audio Provider System&#10;&#10;This system provides automatic downloading and management of audio tools (ffmpeg and yt-dlp) for the CreateHarmonics mod.&#10;&#10;## Architecture&#10;&#10;### Core Components&#10;&#10;1. **AudioProvider Interface** (`audio/provider/AudioProvider.kt`)&#10;   - Defines the contract for all audio providers&#10;   - Methods: `isAvailable()`, `install()`, `getExecutablePath()`, `getName()`&#10;&#10;2. **AbstractDownloadableProvider** (`audio/provider/AbstractDownloadableProvider.kt`)&#10;   - Base implementation for downloadable audio tools&#10;   - Handles download, extraction, and executable discovery&#10;   - Platform-specific executable location&#10;   - Supports both direct downloads and zip archives&#10;&#10;3. **FFMPEG Provider** (`audio/provider/FFMPEG.kt`)&#10;   - Downloads ffmpeg based on OS and architecture&#10;   - Windows: gyan.dev builds&#10;   - macOS: evermeet.cx builds&#10;   - Linux: johnvansickle static builds&#10;&#10;4. **YTDL Provider** (`audio/provider/YTDL.kt`)&#10;   - Downloads yt-dlp from GitHub releases&#10;   - Platform-specific binaries for Windows, macOS, and Linux&#10;   - Supports ARM64 and x86_64 architectures&#10;&#10;5. **AudioProviderManager** (`audio/provider/AudioProviderManager.kt`)&#10;   - Central registry for all audio providers&#10;   - Manages provider installation and availability&#10;   - Provides status information&#10;&#10;6. **AudioDownloader** (`audio/AudioDownloader.kt`)&#10;   - High-level API for downloading and converting audio&#10;   - Uses yt-dlp for downloading from URLs&#10;   - Uses ffmpeg for audio conversion&#10;   - Automatically ensures providers are available&#10;&#10;## Usage&#10;&#10;### Basic Audio Download&#10;&#10;```kotlin&#10;import me.mochibit.createharmonics.audio.AudioDownloader&#10;import java.io.File&#10;&#10;// Download and convert audio to OGG format&#10;val success = AudioDownloader.downloadAndConvert(&#10;    url = &quot;https://www.youtube.com/watch?v=example&quot;,&#10;    outputFile = File(&quot;audio/output.ogg&quot;),&#10;    format = &quot;ogg&quot;&#10;)&#10;&#10;if (success) {&#10;    println(&quot;Audio downloaded successfully!&quot;)&#10;}&#10;```&#10;&#10;### Check Provider Status&#10;&#10;```kotlin&#10;import me.mochibit.createharmonics.audio.provider.AudioProviderManager&#10;&#10;// Check if all providers are ready&#10;val allReady = AudioProviderManager.areAllProvidersAvailable()&#10;&#10;// Get status for each provider&#10;val status = AudioProviderManager.getProviderStatus()&#10;status.forEach { (name, available) -&gt;&#10;    println(&quot;$name: ${if (available) &quot;Available&quot; else &quot;Not Available&quot;}&quot;)&#10;}&#10;```&#10;&#10;### Manual Provider Installation&#10;&#10;```kotlin&#10;import me.mochibit.createharmonics.audio.provider.FFMPEG&#10;import me.mochibit.createharmonics.audio.provider.YTDL&#10;&#10;// Install individual providers&#10;if (!FFMPEG.isAvailable()) {&#10;    FFMPEG.install()&#10;}&#10;&#10;if (!YTDL.isAvailable()) {&#10;    YTDL.install()&#10;}&#10;&#10;// Or install all missing providers&#10;AudioProviderManager.installMissingProviders()&#10;```&#10;&#10;### Creating Custom Music Discs&#10;&#10;```kotlin&#10;import me.mochibit.createharmonics.content.item.EtherealDiscItem&#10;import kotlin.time.Duration.Companion.minutes&#10;&#10;val customDisc = EtherealDiscItem(&#10;    comparatorOutput = 15,&#10;    soundEvent = { ModSounds.CUSTOM_DISC_SOUND.get() },&#10;    duration = 5.minutes&#10;)&#10;```&#10;&#10;## Directory Structure&#10;&#10;Audio providers are installed to:&#10;```&#10;audio_providers/&#10;├── ffmpeg/&#10;│   └── ffmpeg.exe (or ffmpeg on Unix)&#10;└── yt-dlp/&#10;    └── yt-dlp.exe (or yt-dlp on Unix)&#10;```&#10;&#10;## Supported Platforms&#10;&#10;- **Windows**: x86_64&#10;- **macOS**: x86_64 and ARM64 (Apple Silicon)&#10;- **Linux**: x86_64 and ARM64&#10;&#10;## Features&#10;&#10;- ✅ Automatic provider installation&#10;- ✅ Platform detection and appropriate binary selection&#10;- ✅ Recursive executable discovery in extracted archives&#10;- ✅ Executable permission management&#10;- ✅ Caching of executable paths&#10;- ✅ Error handling and logging&#10;- ✅ Support for multiple audio formats (ogg, mp3, wav, etc.)&#10;&#10;## Extension Points&#10;&#10;### Adding a New Provider&#10;&#10;1. Create a new object extending `AbstractDownloadableProvider`:&#10;&#10;```kotlin&#10;object NewProvider: AbstractDownloadableProvider(&#10;    &quot;provider-name&quot;,&#10;    File(&quot;audio_providers/provider-name&quot;),&#10;    &quot;download-file.zip&quot;,&#10;    &quot;provider-repo&quot;&#10;) {&#10;    override fun getDownloadUrl(): String {&#10;        val osName = System.getProperty(&quot;os.name&quot;).lowercase()&#10;        return when {&#10;            osName.contains(&quot;win&quot;) -&gt; &quot;https://example.com/windows-build.zip&quot;&#10;            osName.contains(&quot;mac&quot;) -&gt; &quot;https://example.com/macos-build.zip&quot;&#10;            osName.contains(&quot;linux&quot;) -&gt; &quot;https://example.com/linux-build.tar.gz&quot;&#10;            else -&gt; throw UnsupportedOperationException(&quot;Unsupported OS: $osName&quot;)&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;2. Register it in `AudioProviderManager`:&#10;&#10;```kotlin&#10;init {&#10;    registerProvider(FFMPEG)&#10;    registerProvider(YTDL)&#10;    registerProvider(NewProvider) // Add your provider&#10;}&#10;```&#10;&#10;## Notes&#10;&#10;- The system automatically handles zip extraction&#10;- Executables are made executable on Unix systems&#10;- Providers are only downloaded once (cached)&#10;- All operations are logged through the mod's logger&#10;- Thread-safe provider management&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>